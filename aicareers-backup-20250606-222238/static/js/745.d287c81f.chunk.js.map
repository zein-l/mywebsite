{"version":3,"file":"static/js/745.d287c81f.chunk.js","mappings":"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","sources":["services/socketService.js","components/Chat/Chat.js"],"sourcesContent":["import io from 'socket.io-client';\n\n// Determine if we're in production based on hostname\nconst isProduction = typeof window !== 'undefined' && \n  (window.location.hostname === 'leochlon.github.io' || \n   window.location.hostname.includes('github.io'));\n\n// Default backend URL\nconst DEFAULT_SERVER_URL = isProduction \n  ? 'https://ai-careers-backend.fly.dev'\n  : (process.env.REACT_APP_API_URL || 'http://localhost:5002');\n\nclass SocketService {\n  constructor() {\n    this.socket = null;\n    this.isConnected = false;\n    this.eventListeners = new Map();\n    this.connectionPromise = null;\n  }\n\n  async connect(serverUrl = DEFAULT_SERVER_URL) {\n    console.log('Socket connecting to:', serverUrl);\n    // If already connected or connecting, return existing promise\n    if (this.socket && this.isConnected) {\n      return Promise.resolve(this.socket);\n    }\n\n    if (this.connectionPromise) {\n      return this.connectionPromise;\n    }\n\n    // Clean up any existing connection\n    if (this.socket) {\n      this.disconnect();\n    }\n\n    this.connectionPromise = new Promise((resolve, reject) => {\n      this.socket = io(serverUrl, {\n        transports: ['websocket', 'polling'],\n        upgrade: true,\n        rememberUpgrade: true,\n        timeout: 10000,\n        forceNew: true\n      });\n\n      const onConnect = () => {\n        console.log('Connected to chat server');\n        this.isConnected = true;\n        this.socket.off('connect_error', onError);\n        resolve(this.socket);\n      };\n\n      const onError = (error) => {\n        console.error('Connection error:', error);\n        this.isConnected = false;\n        this.socket.off('connect', onConnect);\n        reject(error);\n      };\n\n      this.socket.once('connect', onConnect);\n      this.socket.once('connect_error', onError);\n\n      // Set up persistent event handlers\n      this.socket.on('disconnect', (reason) => {\n        console.log('Disconnected from chat server:', reason);\n        this.isConnected = false;\n        this.connectionPromise = null;\n      });\n    });\n\n    try {\n      await this.connectionPromise;\n      this.connectionPromise = null;\n      return this.socket;\n    } catch (error) {\n      this.connectionPromise = null;\n      throw error;\n    }\n  }\n\n  disconnect() {\n    if (this.socket) {\n      this.socket.disconnect();\n      this.socket = null;\n      this.isConnected = false;\n      this.connectionPromise = null;\n    }\n  }\n\n  // Join a chat room\n  joinChat(userData) {\n    if (this.socket && this.isConnected) {\n      console.log('Joining chat with data:', userData);\n      this.socket.emit('join_chat', userData);\n    } else {\n      console.warn('Cannot join chat: not connected');\n    }\n  }\n\n  // Send a message\n  sendMessage(content) {\n    if (this.socket && this.isConnected) {\n      console.log('Sending message:', content);\n      this.socket.emit('send_message', { content });\n    } else {\n      console.warn('Cannot send message: not connected');\n    }\n  }\n\n  // Typing indicators\n  startTyping() {\n    if (this.socket && this.isConnected) {\n      this.socket.emit('typing_start');\n    }\n  }\n\n  stopTyping() {\n    if (this.socket && this.isConnected) {\n      this.socket.emit('typing_stop');\n    }\n  }\n\n  // Event listener management\n  on(event, callback) {\n    if (this.socket) {\n      this.socket.on(event, callback);\n      \n      // Store reference for cleanup\n      if (!this.eventListeners.has(event)) {\n        this.eventListeners.set(event, []);\n      }\n      this.eventListeners.get(event).push(callback);\n    }\n  }\n\n  off(event, callback) {\n    if (this.socket) {\n      this.socket.off(event, callback);\n      \n      // Remove from stored references\n      if (this.eventListeners.has(event)) {\n        const listeners = this.eventListeners.get(event);\n        const index = listeners.indexOf(callback);\n        if (index > -1) {\n          listeners.splice(index, 1);\n        }\n      }\n    }\n  }\n\n  // Cleanup all listeners\n  removeAllListeners() {\n    if (this.socket) {\n      this.eventListeners.forEach((listeners, event) => {\n        listeners.forEach(listener => this.socket.off(event, listener));\n      });\n      this.eventListeners.clear();\n    }\n  }\n\n  // Get connection status\n  getConnectionStatus() {\n    return this.isConnected && this.socket?.connected;\n  }\n}\n\n// Create singleton instance\nconst socketService = new SocketService();\n\nexport default socketService;\n","import React, { useState, useRef, useEffect, useCallback, useMemo, memo } from 'react';\nimport ErrorBoundary from '../common/ErrorBoundary';\nimport styled from 'styled-components';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { useFocusTrap } from '../../hooks/useFocusTrap';\nimport { useUser } from '../../context/UserContext';\nimport socketService from '../../services/socketService';\n\n// Import optimized sprite images\nimport maleSprite from '../../assets/images/maleSprite-small.png';\nimport femaleSprite from '../../assets/images/femaleSprite-small.png';\n\nconst FloatingModal = styled(motion.div).attrs({\n  role: 'dialog',\n  'aria-modal': true,\n  'aria-labelledby': 'chat-title'\n})`\n  position: fixed;\n  right: ${props => props.theme.spacing.xl};\n  bottom: ${props => props.theme.spacing.xl};\n  width: 360px;\n  background: ${props => props.theme.colors.secondary};\n  border: 1px solid ${props => props.theme.colors.glass.border};\n  border-radius: ${props => props.theme.borderRadius.xl};\n  overflow: hidden;\n  box-shadow: ${props => props.theme.shadows.lg};\n  backdrop-filter: blur(20px);\n  \n  @media (max-width: 768px) {\n    width: calc(100% - ${props => props.theme.spacing.xl} * 2);\n    right: ${props => props.theme.spacing.lg};\n    bottom: ${props => props.theme.spacing.lg};\n    max-height: 80vh;\n  }\n`;\n\nconst ModalHeader = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: ${props => props.theme.spacing.lg};\n  background: ${props => props.theme.colors.tertiary};\n  border-bottom: 1px solid ${props => props.theme.colors.glass.border};\n  \n  h2 {\n    color: ${props => props.theme.colors.text.primary};\n    font-size: ${props => props.theme.typography.fontSize.xl};\n    font-weight: ${props => props.theme.typography.fontWeight.semibold};\n  }\n`;\n\nconst CloseButton = styled(motion.button)`\n  background: none;\n  border: none;\n  color: ${props => props.theme.colors.text.secondary};\n  cursor: pointer;\n  padding: ${props => props.theme.spacing.xs};\n  \n  &:hover {\n    color: ${props => props.theme.colors.text.primary};\n  }\n`;\n\nconst ModalContent = styled.div`\n  padding: ${props => props.theme.spacing.lg};\n  max-height: 400px;\n  \n  @media (max-width: 768px) {\n    max-height: calc(80vh - 120px); // Account for header and input\n  }\n  overflow-y: auto;\n  \n  &::-webkit-scrollbar {\n    width: 6px;\n  }\n  \n  &::-webkit-scrollbar-track {\n    background: ${props => props.theme.colors.glass.primary};\n  }\n  \n  &::-webkit-scrollbar-thumb {\n    background: ${props => props.theme.colors.glass.border};\n    border-radius: ${props => props.theme.borderRadius.full};\n  }\n`;\n\nconst MessageBase = styled.article`\n  display: flex;\n  gap: ${props => props.theme.spacing.md};\n  margin-bottom: ${props => props.theme.spacing.md};\n  \n  .avatar {\n    width: 32px;\n    height: 32px;\n    border-radius: ${props => props.theme.borderRadius.full};\n    background: ${props => props.theme.colors.glass.secondary};\n    display: flex;\n    align-items: center;\n    justify-content: center;\n  }\n  \n  .content {\n    flex: 1;\n    background: ${props => props.theme.colors.glass.secondary};\n    padding: ${props => props.theme.spacing.md};\n    border-radius: ${props => props.theme.borderRadius.lg};\n    color: ${props => props.theme.colors.text.primary};\n  }\n  \n  &.sent {\n    flex-direction: row-reverse;\n    \n    .content {\n      background: ${props => props.theme.colors.accent};\n      color: ${props => props.theme.colors.primary};\n    }\n  }\n`;\n\nconst Input = styled.input.attrs({\n  'aria-label': 'Type your message'\n})`\n  width: 100%;\n  background: ${props => props.theme.colors.tertiary};\n  border: 1px solid ${props => props.theme.colors.glass.border};\n  border-radius: ${props => props.theme.borderRadius.lg};\n  padding: ${props => props.theme.spacing.md};\n  color: ${props => props.theme.colors.text.primary};\n  margin-top: ${props => props.theme.spacing.lg};\n  \n  &:focus {\n    outline: none;\n    border-color: ${props => props.theme.colors.text.accent};\n    box-shadow: ${props => props.theme.shadows.accent};\n  }\n  \n  &::placeholder {\n    color: ${props => props.theme.colors.text.secondary};\n  }\n`;\n\nconst OnlineUsers = styled.div`\n  display: flex;\n  align-items: center;\n  gap: ${props => props.theme.spacing.xs};\n  font-size: ${props => props.theme.typography.fontSize.sm};\n  color: ${props => props.theme.colors.text.secondary};\n  margin-left: ${props => props.theme.spacing.md};\n`;\n\nconst OnlineIndicator = styled.div`\n  width: 8px;\n  height: 8px;\n  background: ${props => props.$connected ? props.theme.colors.success : props.theme.colors.error};\n  border-radius: 50%;\n`;\n\nconst modalVariants = {\n  hidden: { opacity: 0, y: 20, scale: 0.95 },\n  visible: { \n    opacity: 1, \n    y: 0, \n    scale: 1,\n    transition: { type: \"spring\", stiffness: 300, damping: 30 }\n  },\n  exit: { opacity: 0, y: 20, scale: 0.95 }\n};\n\nconst Message = memo(({ message, userName }) => (\n  <MessageBase\n    className={message.isUser ? 'sent' : ''}\n    aria-label={`${message.isUser ? (userName || 'You') : 'AI Assistant'} said: ${message.text}`}\n  >\n    <div className=\"avatar\">\n      {message.isUser ? (\n        message.userGender ? (\n          <img\n            src={message.userGender === 'female' ? femaleSprite : maleSprite}\n            alt={`${message.userGender} trainer sprite`}\n            style={{\n              width: '24px',\n              height: '24px',\n              imageRendering: 'pixelated'\n            }}\n          />\n        ) : '👤'\n      ) : '🤖'}\n    </div>\n    <div className=\"content\">\n      {message.isUser && userName && (\n        <div style={{\n          fontSize: '0.75rem',\n          color: 'rgba(255,255,255,0.7)',\n          marginBottom: '0.25rem',\n          fontWeight: 'bold'\n        }}>\n          {userName}\n        </div>\n      )}\n      {message.text}\n    </div>\n  </MessageBase>\n));\n\nMessage.displayName = 'Message';\n\nconst Chat = ({ isOpen, onClose }) => {\n  const modalRef = useRef(null);\n  useFocusTrap(modalRef, isOpen);\n  const { user } = useUser();\n  \n  const [messages, setMessages] = useState([]);\n  const [inputValue, setInputValue] = useState('');\n  const [onlineCount, setOnlineCount] = useState(0);\n  const [isConnected, setIsConnected] = useState(false);\n  const [isTyping, setIsTyping] = useState(false);\n  const [typingUsers, setTypingUsers] = useState(new Set());\n  const [connectionError, setConnectionError] = useState(null);\n  const messagesEndRef = useRef(null);\n  const typingTimeoutRef = useRef(null);\n\n  // Initialize socket connection when chat opens\n  useEffect(() => {\n    if (!isOpen || !user.hasProfile) {\n      return;\n    }\n\n    let isComponentMounted = true;\n\n    const setupChat = async () => {\n      try {\n        // Connect to socket server\n        await socketService.connect();\n        \n        if (!isComponentMounted) return;\n\n        // Set up event listeners\n        const handleRecentMessages = (recentMessages) => {\n          if (!isComponentMounted) return;\n          setMessages(recentMessages.map(msg => ({\n            id: msg._id || msg.id,\n            text: msg.content,\n            isUser: msg.userName === user.name,\n            userName: msg.userName,\n            userGender: msg.userGender,\n            timestamp: new Date(msg.timestamp)\n          })));\n        };\n\n        const handleNewMessage = (message) => {\n          if (!isComponentMounted) return;\n          setMessages(prev => [...prev, {\n            id: message.id,\n            text: message.content,\n            isUser: message.userName === user.name,\n            userName: message.userName,\n            userGender: message.userGender,\n            timestamp: new Date(message.timestamp)\n          }]);\n        };\n\n        const handleUserCountUpdate = (count) => {\n          if (!isComponentMounted) return;\n          setOnlineCount(count);\n        };\n\n        const handleUserJoined = (data) => {\n          if (!isComponentMounted) return;\n          setMessages(prev => [...prev, {\n            id: `join-${Date.now()}-${Math.random()}`,\n            text: `${data.userName} joined the chat`,\n            isUser: false,\n            isSystemMessage: true,\n            timestamp: new Date(data.timestamp)\n          }]);\n        };\n\n        const handleUserLeft = (data) => {\n          if (!isComponentMounted) return;\n          setMessages(prev => [...prev, {\n            id: `leave-${Date.now()}-${Math.random()}`,\n            text: `${data.userName} left the chat`,\n            isUser: false,\n            isSystemMessage: true,\n            timestamp: new Date(data.timestamp)\n          }]);\n        };\n\n        const handleUserTyping = (data) => {\n          if (!isComponentMounted || data.userName === user.name) return;\n          if (data.isTyping) {\n            setTypingUsers(prev => new Set([...prev, data.userName]));\n          } else {\n            setTypingUsers(prev => {\n              const newSet = new Set(prev);\n              newSet.delete(data.userName);\n              return newSet;\n            });\n          }\n        };\n\n        const handleConnect = () => {\n          if (!isComponentMounted) return;\n          console.log('Connected to chat server');\n          setIsConnected(true);\n          setConnectionError(null);\n          \n          // Join chat room after connection is established\n          socketService.joinChat({\n            userName: user.name,\n            userGender: user.gender,\n            room: 'general'\n          });\n        };\n\n        const handleDisconnect = () => {\n          if (!isComponentMounted) return;\n          console.log('Disconnected from chat server');\n          setIsConnected(false);\n        };\n\n        const handleConnectionError = (error) => {\n          if (!isComponentMounted) return;\n          console.error('Connection error:', error);\n          setConnectionError('Failed to connect to chat server');\n          setIsConnected(false);\n        };\n\n        const handleError = (error) => {\n          console.error('Chat error:', error);\n          if (error.message === 'User not found') {\n            // Re-join the chat if user is not found\n            socketService.joinChat({\n              userName: user.name,\n              userGender: user.gender,\n              room: 'general'\n            });\n          }\n        };\n\n        // Register event listeners\n        socketService.on('connect', handleConnect);\n        socketService.on('disconnect', handleDisconnect);\n        socketService.on('connect_error', handleConnectionError);\n        socketService.on('recent_messages', handleRecentMessages);\n        socketService.on('new_message', handleNewMessage);\n        socketService.on('user_count_update', handleUserCountUpdate);\n        socketService.on('user_joined', handleUserJoined);\n        socketService.on('user_left', handleUserLeft);\n        socketService.on('user_typing', handleUserTyping);\n        socketService.on('error', handleError);\n\n        // If already connected, join immediately\n        if (socketService.getConnectionStatus()) {\n          handleConnect();\n        }\n\n      } catch (error) {\n        console.error('Failed to setup chat:', error);\n        if (isComponentMounted) {\n          setConnectionError('Failed to initialize chat');\n        }\n      }\n    };\n\n    setupChat();\n\n    // Set initial welcome message\n    setMessages([{\n      id: 'welcome',\n      text: `Welcome to the AI Careers chat, ${user.name}! Connect with other attendees and discuss AI career opportunities.`,\n      isUser: false,\n      isSystemMessage: true,\n      timestamp: new Date()\n    }]);\n\n    // Cleanup function\n    return () => {\n      isComponentMounted = false;\n      if (typingTimeoutRef.current) {\n        clearTimeout(typingTimeoutRef.current);\n      }\n    };\n  }, [isOpen, user.hasProfile, user.name, user.gender]);\n\n  // Handle chat close cleanup\n  useEffect(() => {\n    if (!isOpen) {\n      socketService.removeAllListeners();\n      socketService.disconnect();\n      setMessages([]);\n      setIsConnected(false);\n      setOnlineCount(0);\n      setTypingUsers(new Set());\n      setConnectionError(null);\n    }\n  }, [isOpen]);\n\n  const scrollToBottom = useCallback(() => {\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  }, []);\n\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages, scrollToBottom]);\n\n  const handleSendMessage = useCallback(() => {\n    if (inputValue.trim() === '' || !isConnected) return;\n\n    // Send message through socket\n    socketService.sendMessage(inputValue.trim());\n    \n    // Clear input and stop typing indicator\n    setInputValue('');\n    socketService.stopTyping();\n    \n    // Clear typing timeout\n    if (typingTimeoutRef.current) {\n      clearTimeout(typingTimeoutRef.current);\n    }\n  }, [inputValue, isConnected]);\n\n  const handleInputChange = useCallback((e) => {\n    setInputValue(e.target.value);\n    \n    // Handle typing indicators\n    if (isConnected && e.target.value.length > 0) {\n      if (!isTyping) {\n        setIsTyping(true);\n        socketService.startTyping();\n      }\n      \n      // Reset typing timeout\n      if (typingTimeoutRef.current) {\n        clearTimeout(typingTimeoutRef.current);\n      }\n      \n      typingTimeoutRef.current = setTimeout(() => {\n        setIsTyping(false);\n        socketService.stopTyping();\n      }, 1000);\n    } else if (isTyping) {\n      setIsTyping(false);\n      socketService.stopTyping();\n      if (typingTimeoutRef.current) {\n        clearTimeout(typingTimeoutRef.current);\n      }\n    }\n  }, [isConnected, isTyping]);\n\n  const handleKeyPress = useCallback((e) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      handleSendMessage();\n    }\n  }, [handleSendMessage]);\n\n  if (!isOpen) return null;\n\n  return (\n    <ErrorBoundary>\n    <FloatingModal\n      ref={modalRef}\n      variants={modalVariants}\n      initial=\"hidden\"\n      animate=\"visible\"\n      exit=\"exit\"\n    >\n      <ModalHeader>\n        <h2 id=\"chat-title\">\n          💬 {isConnected ? 'Live Chat' : 'Chat (Connecting...)'}\n          <OnlineUsers>\n            <OnlineIndicator $connected={isConnected} />\n            {isConnected ? `${onlineCount} online` : 'Connecting...'}\n          </OnlineUsers>\n        </h2>\n        <CloseButton\n          onClick={onClose}\n          whileHover={{ scale: 1.1 }}\n          whileTap={{ scale: 0.9 }}\n          aria-label=\"Close chat\"\n        >\n          ×\n        </CloseButton>\n      </ModalHeader>\n\n      <ModalContent role=\"log\" aria-live=\"polite\" aria-label=\"Chat messages\">\n        <AnimatePresence>\n          {messages.map((message) => (\n            <Message key={message.id} message={message} userName={message.userName} />\n          ))}\n        </AnimatePresence>\n        <div ref={messagesEndRef} />\n      </ModalContent>\n\n      <div style={{ padding: '1rem' }}>\n        {typingUsers.size > 0 && (\n          <div style={{ \n            fontSize: '0.75rem', \n            color: '#666', \n            marginBottom: '0.5rem',\n            fontStyle: 'italic' \n          }}>\n            {Array.from(typingUsers).join(', ')} {typingUsers.size === 1 ? 'is' : 'are'} typing...\n          </div>\n        )}\n        {connectionError && (\n          <div style={{ \n            fontSize: '0.75rem', \n            color: '#ff6b6b', \n            marginBottom: '0.5rem' \n          }}>\n            {connectionError}\n          </div>\n        )}\n        <Input\n          value={inputValue}\n          onChange={handleInputChange}\n          onKeyPress={handleKeyPress}\n          placeholder={isConnected ? \"Type your message...\" : \"Connecting to chat...\"}\n          disabled={!isConnected}\n        />\n      </div>\n    </FloatingModal>\n    </ErrorBoundary>\n  );\n};\n\nexport default Chat;"],"names":["window","location","hostname","includes","constructor","this","socket","isConnected","eventListeners","Map","connectionPromise","connect","serverUrl","arguments","length","undefined","console","log","Promise","resolve","disconnect","reject","io","transports","upgrade","rememberUpgrade","timeout","forceNew","onConnect","off","onError","error","once","on","reason","joinChat","userData","emit","warn","sendMessage","content","startTyping","stopTyping","event","callback","has","set","get","push","listeners","index","indexOf","splice","removeAllListeners","forEach","listener","clear","getConnectionStatus","_this$socket","connected","FloatingModal","styled","motion","div","attrs","role","_templateObject","_taggedTemplateLiteral","props","theme","spacing","xl","colors","secondary","glass","border","borderRadius","shadows","lg","ModalHeader","_templateObject2","tertiary","text","primary","typography","fontSize","fontWeight","semibold","CloseButton","button","_templateObject3","xs","ModalContent","_templateObject4","full","MessageBase","article","_templateObject5","md","accent","Input","input","_templateObject6","OnlineUsers","_templateObject7","sm","OnlineIndicator","_templateObject8","$connected","success","modalVariants","hidden","opacity","y","scale","visible","transition","type","stiffness","damping","exit","Message","memo","_ref","message","userName","_jsxs","className","isUser","concat","children","_jsx","userGender","src","femaleSprite","maleSprite","alt","style","width","height","imageRendering","color","marginBottom","displayName","_ref2","isOpen","onClose","modalRef","useRef","useFocusTrap","user","useUser","messages","setMessages","useState","inputValue","setInputValue","onlineCount","setOnlineCount","setIsConnected","isTyping","setIsTyping","typingUsers","setTypingUsers","Set","connectionError","setConnectionError","messagesEndRef","typingTimeoutRef","useEffect","hasProfile","isComponentMounted","async","socketService","handleRecentMessages","recentMessages","map","msg","id","_id","name","timestamp","Date","handleNewMessage","prev","handleUserCountUpdate","count","handleUserJoined","data","now","Math","random","isSystemMessage","handleUserLeft","handleUserTyping","newSet","delete","handleConnect","gender","room","handleDisconnect","handleConnectionError","handleError","setupChat","current","clearTimeout","scrollToBottom","useCallback","_messagesEndRef$curre","scrollIntoView","behavior","handleSendMessage","trim","handleInputChange","e","target","value","setTimeout","handleKeyPress","key","shiftKey","preventDefault","ErrorBoundary","ref","variants","initial","animate","onClick","whileHover","whileTap","AnimatePresence","padding","size","fontStyle","Array","from","join","onChange","onKeyPress","placeholder","disabled"],"sourceRoot":""}