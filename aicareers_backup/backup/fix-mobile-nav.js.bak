// This file provides a direct fix for the mobile navigation X button
// It works by attaching event listeners directly to DOM elements
// Place this script in public folder to be loaded directly

(function() {
  // Run this after the document is fully loaded
  document.addEventListener('DOMContentLoaded', function() {
    setTimeout(fixMobileNavigation, 1000);
  });

  // For single page apps, also watch for route changes
  let lastUrl = location.href; 
  new MutationObserver(() => {
    const url = location.href;
    if (url !== lastUrl) {
      lastUrl = url;
      setTimeout(fixMobileNavigation, 500);
    }
  }).observe(document, {subtree: true, childList: true});

  // Helper function to fix a specific close button
  function fixCloseButton(button) {
    if (!button) return;
    
    // Skip if already fixed
    if (button.getAttribute('data-fixed-close')) return;
    button.setAttribute('data-fixed-close', 'true');
    
    // Add a direct click handler that bypasses React's event system
    button.addEventListener('click', function(e) {
      e.stopPropagation();
      console.log('Close button clicked, forcing navigation to close');
      
      // Force the menu closed by setting state directly
      window.__FORCE_CLOSE_MOBILE_NAV = true;
      
      // Try multiple approaches to ensure the menu closes
      // 1. Dispatch a custom event
      document.dispatchEvent(new CustomEvent('forceCloseMenu', { bubbles: true }));
      
      // 2. Try to click on the overlay directly
      const overlay = document.querySelector('[role="dialog"], .mobile-overlay');
      if (overlay) {
        overlay.click();
      }
      
      // 3. Click outside the navigation
      setTimeout(() => {
        document.body.click();
      }, 50);
      
      // 4. Create and dispatch a mousedown event outside the navigation
      setTimeout(() => {
        const clickEvent = new MouseEvent('mousedown', {
          bubbles: true,
          cancelable: true,
          view: window
        });
        document.body.dispatchEvent(clickEvent);
      }, 100);
    });
  }

  function fixMobileNavigation() {
    console.log('Fixing mobile navigation X button...');
    
    // Find and fix X buttons in mobile navigation
    const findAndFixCloseButtons = () => {
      // Target navigation elements that might contain our close button
      const navElements = document.querySelectorAll('nav');
      
      navElements.forEach(nav => {
        // Find the X button inside this navigation
        const buttons = nav.querySelectorAll('button');
        
        buttons.forEach(button => {
          // Look for SVG path with X icon signature
          const svg = button.querySelector('svg');
          if (!svg) return;
          
          const path = svg.querySelector('path');
          if (!path) return;
          
          const d = path.getAttribute('d');
          if (!d) return;
          
          // Check if this looks like an X icon
          if (d.includes('M6 18L18 6') || d.includes('M6 6l12 12')) {
            console.log('Found X button in navigation, adding direct close handler');
            
            // Add a data attribute to avoid double-binding
            if (button.getAttribute('data-fixed-close')) return;
            button.setAttribute('data-fixed-close', 'true');
            
            // Add our direct click handler
            button.addEventListener('click', function(e) {
              // Prevent event propagation
              e.stopPropagation();
              
              console.log('X button clicked, forcing menu close');
              
              // Force close by dispatching a custom event
              document.dispatchEvent(new CustomEvent('forceCloseMenu', { bubbles: true }));
              
              // Find the closest mobile overlay and click it to close the menu
              const overlay = document.querySelector('[role="dialog"], .mobile-overlay');
              if (overlay) {
                overlay.click();
                return;
              }
              
              // Alternative: try to find the menu toggle button and simulate click
              const menuButton = document.querySelector('[aria-label="Open navigation menu"]');
              if (menuButton) {
                // Force the menu closed
                const mobileOverlay = document.querySelector('.mobile-overlay, [role="dialog"]');
                if (mobileOverlay) {
                  mobileOverlay.click();
                  return;
                }
                
                // If no overlay, try to directly set menu state
                const app = document.querySelector('#root');
                if (app) {
                  // Create and dispatch a custom event to notify our app
                  const event = new CustomEvent('forceCloseMenu', { bubbles: true });
                  app.dispatchEvent(event);
                }
                
                // Last resort: click outside the nav to trigger click outside handler
                setTimeout(() => {
                  document.body.click();
                }, 50);
              }
              
              // Last resort: try to force close by clicking outside
              setTimeout(() => {
                const clickEvent = new MouseEvent('mousedown', {
                  bubbles: true,
                  cancelable: true,
                  view: window
                });
                document.body.dispatchEvent(clickEvent);
              }, 100);
            });
          }
        });
      });
    };
    
    // Run now and set up a mutation observer to continue fixing
    findAndFixCloseButtons();
    
    // Set up mutation observer to watch for DOM changes
    const observer = new MutationObserver((mutations) => {
      for (const mutation of mutations) {
        if (mutation.type === 'childList' && mutation.addedNodes.length) {
          findAndFixCloseButtons();
        }
      }
    });
    
    observer.observe(document.body, {
      childList: true,
      subtree: true
    });
  }
})();
